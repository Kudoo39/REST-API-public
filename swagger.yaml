openapi: 3.0.0
servers:
  - description: SwaggerHub API
    url: HTTP
  - description: SwaggerHub Secure API
    url: HTTPS
info:
  title: A simple E-commerce API
  description: A simple API for managing products, orders, users, and categories in an e-commerce system.
  version: 1.0.0
tags:
  - name: product
    description: Everything about your product
  - name: user
    description: Operations about user
paths:
  /products:
    get:
      tags:
        - product
      summary: get all products
      description: get all available products.
      responses:
        '200':
          description: get all products successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      tags:
        - product
      summary: create a new product
      description: create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: create new product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{productId}:
    get:
      tags:
        - product
      summary: get a product
      description: get a product
      responses:
        '200':
          description: get a product successfully
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Product'

    put:
      tags:
        - product
      summary: update a product
      description: update a product by the product id
      parameters:
        - name: productId
          required: true
          in: path
          description: id of the product
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: the product with that product id is updated successfully

    delete:
      tags:
        - product
      summary: delete the product by the product id
      description: delete the product by the product id
      parameters:
        - name: productId
          required: true
          in: path
          description: id of the product
          schema:
            type: string
      responses:
        '204':
          description: the product with that product id is deleted successfully

  /users:
    post:
      tags:
        - user
      summary: create a new user
      description: create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: create new user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags:
        - user
      summary: get a user
      description: get a user
      responses:
        '200':
          description: get a user successfully
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/User'

    put:
      tags:
        - user
      summary: update a user
      description: update a user by the user id
      parameters:
        - name: userId
          required: true
          in: path
          description: id of the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: the user with that user id is updated successfully

components:
  schemas:
    Product:
      type: object
      properties:
        productId:
          type: string
          example: '102'
        title:
          type: string
          example: 'product1'
        price:
          type: integer
          example: 1
        description:
          type: string
          example: 'this is a product'
        size:
          type: number
          example: '40'
        images:
          type: string
          example: 'https://fastly.picsum.photos/id/5/640/480.jpg'
        categoryId:
          type: string

    User:
      type: object
      properties:
        userId:
          type: string
          example: '203'
        email:
          type: string
          example: 'user@mail.com'
        password:
          type: string
          example: 'password'
        fullname:
          type: string
          example: 'John Smith'
        role:
          type: string
          example: 'customer'
        avatar:
          type: string
          example: 'https://fastly.picsum.photos/id/5/640/480.jpg'
